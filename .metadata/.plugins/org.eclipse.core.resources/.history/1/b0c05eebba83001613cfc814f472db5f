package com.newt.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.newt.model.ShoppingCart;
import com.newt.model.ShoppingCartItems;
import com.newt.repository.ShoppingCartItemsRepository;
import com.newt.repository.ShoppingCartRepository;
import com.newt.repository.SmartPhoneRepository;
import com.wordnik.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/ShoppingCart")
public class ShoppingCartController {
	
	@Autowired
	private ShoppingCartRepository shoppingCartRepo;
	@Autowired
	private ShoppingCartItemsRepository shoppingCartItemsRepo;
	@Autowired
	private SmartPhoneRepository smartPhoneRepository;
	
	ShoppingCartItems shoppingCartItems = new ShoppingCartItems();

	@ApiOperation(value = "add item")
    @RequestMapping(value="/{customerId}/{productTypeId}/{productId}/{quantity}/{price}",method = RequestMethod.PUT,produces = "application/json")
	public int addItem (@PathVariable int customerId,@PathVariable String productTypeId,@PathVariable int productId,@PathVariable int quantity,@PathVariable float price) {
		
		
		System.out.println("VALUES--->Customer ID"+customerId+"productTypeId"+productTypeId+"productId"+productId+"quantity"+quantity+"price"+price);
		ShoppingCart shoppingCart = new ShoppingCart();
		
		ShoppingCart shopCart=shoppingCartRepo.findByCustomerId(customerId);
		if(shopCart!=null){
			
			if(shopCart.getCustomerId()>0){
				System.out.println("TEST--->1");
				shoppingCartItems.setShoppingCartId(shopCart.getShoppingCartId());
				shoppingCartItems.setProductId(productId);
				shoppingCartItems.setQuantity(quantity);
				shoppingCartItems.setProductTypeId(productTypeId);
				if(quantity>0)
				{
				price = price*quantity;
				
				}
				shoppingCartItems.setPrice(price);
				
				System.out.println("Shopping Cart CUSTOMER Details----->"+shoppingCartItems.toString());
				shoppingCartItemsRepo.save(shoppingCartItems);
			}
		}/*else{
			
			
			System.out.println("TEST--->2");
			shoppingCart.setCustomerId(customerId);
			shoppingCart.setStatus("P"); 
		    System.out.println("TEST--->3"+shoppingCart.toString());
		    shoppingCartRepo.save(shoppingCart);
		    shoppingCartItems.setShoppingCartId(shopCart.getShoppingCartId());
			shoppingCartItems.setProductId(productId);
			shoppingCartItems.setProductTypeId(productTypeId);
			shoppingCartItems.setQuantity(quantity);
			if(quantity>0)
			{
			price = price*quantity;
			
			}
			shoppingCartItems.setPrice(price);
			System.out.println("Shopping WITH OUT CUSTOMER Details----->"+shoppingCartItems.toString());
			shoppingCartItemsRepo.save(shoppingCartItems);
		}
		    Disabled this service for temp purpose */
		return shoppingCartItems.getShoppingCartId();		
    }

	/*Method to Modify the Order in ShopCartList*/
	
	@ApiOperation(value = "modify Item")
    @RequestMapping(value="/{shoppingCartID}/{quantity}",method = RequestMethod.PUT,produces = "application/json")
	public void modifyItem(@PathVariable int shoppingCartID, @PathVariable int quantity) {	
	
		ShoppingCartItems shoppingCartItems = shoppingCartItemsRepo.findByShoppingCartItemsId(shoppingCartID);

		if (quantity > 0) {
			if (shoppingCartItems != null) {
				if (shoppingCartItems.getShoppingCartId() > 0) {
					shoppingCartItems.setQuantity(quantity);
					shoppingCartItemsRepo.save(shoppingCartItems);
				}
			}

		}
	}
	
	
	/*@ApiOperation(value = "Delete item")
	@RequestMapping(value="/delete/{customerId}/{productTypeId}", method = RequestMethod.DELETE)
	public void delete(@PathVariable int customerId,@PathVariable String productTypeId){
		
		ShoppingCart shoppingCart=shoppingCartRepo.findByCustomerId(customerId);
		
		int shoppingCartID =shoppingCart.getShoppingCartId();
		shoppingCartItemsRepo.findByShoppingCartItemsId(shoppingCartID);
		
		if (shoppingCartItems != null) {
			if (shoppingCartItems.getShoppingCartId() > 0) {
				shoppingCartItemsRepo.delete(productTypeId);
			}
		}
						
	}
	*/
	/*
	 */
	
}
